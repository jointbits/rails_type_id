# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `with_model` gem.
# Please instead update this file by running `bin/tapioca gem with_model`.


# source://with_model//lib/with_model/descendants_tracker.rb#77
class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization
  extend ::WithModel::DescendantsTracker::DestroyedClassesFiltering
end

# source://with_model//lib/with_model/descendants_tracker.rb#81
module ActiveSupport; end

# source://with_model//lib/with_model/descendants_tracker.rb#82
module ActiveSupport::DescendantsTracker
  class << self
    # Returns the value of attribute clear_disabled.
    #
    # source://with_model//lib/with_model/descendants_tracker.rb#84
    def clear_disabled; end
  end
end

# source://with_model//lib/with_model/constant_stubber.rb#3
module WithModel
  # @param name [Symbol] The constant name to assign the model class to.
  # @param scope Passed to `before`/`after` in the test context. RSpec only.
  # @param options Passed to {WithModel::Model#initialize}.
  # @param block Yielded an instance of {WithModel::Model::DSL}.
  #
  # source://with_model//lib/with_model.rb#39
  def with_model(name, scope: T.unsafe(nil), **options, &block); end

  # @param name [Symbol] The table name to create.
  # @param scope Passed to `before`/`after` in the test context. Rspec only.
  # @param options Passed to {WithModel::Table#initialize}.
  # @param block Passed to {WithModel::Table#initialize} (like {WithModel::Model::DSL#table}).
  #
  # source://with_model//lib/with_model.rb#52
  def with_table(name, scope: T.unsafe(nil), **options, &block); end

  private

  # @param object [Object] The new model object instance to create
  # @param scope Passed to `before`/`after` in the test context. Rspec only.
  # @param runner [Symbol] The test running, either :rspec or :minitest, defaults to :rspec
  #
  # source://with_model//lib/with_model.rb#64
  def setup_object(object, scope: T.unsafe(nil), runner: T.unsafe(nil)); end

  class << self
    # source://with_model//lib/with_model.rb#31
    def runner; end

    # Sets the attribute runner
    #
    # @param value the value to set the attribute runner to.
    #
    # source://with_model//lib/with_model.rb#28
    def runner=(_arg0); end
  end
end

# source://with_model//lib/with_model/constant_stubber.rb#4
class WithModel::ConstantStubber
  # @return [ConstantStubber] a new instance of ConstantStubber
  #
  # source://with_model//lib/with_model/constant_stubber.rb#5
  def initialize(const_name); end

  # source://with_model//lib/with_model/constant_stubber.rb#11
  def stub_const(value); end

  # source://with_model//lib/with_model/constant_stubber.rb#21
  def unstub_const; end

  private

  # source://with_model//lib/with_model/constant_stubber.rb#43
  def basename; end

  # source://with_model//lib/with_model/constant_stubber.rb#39
  def lookup_list; end

  # source://with_model//lib/with_model/constant_stubber.rb#32
  def namespace; end
end

# Based on https://github.com/rails/rails/blob/491afff27e2dd3d5f301b478b9a43d3c31709af8/activesupport/lib/active_support/descendants_tracker.rb
#
# source://with_model//lib/with_model/descendants_tracker.rb#5
module WithModel::DescendantsTracker
  class << self
    # source://with_model//lib/with_model/descendants_tracker.rb#48
    def clear(classes); end

    # source://with_model//lib/with_model/descendants_tracker.rb#57
    def reject!(classes); end
  end
end

# source://with_model//lib/with_model/descendants_tracker.rb#65
module WithModel::DescendantsTracker::DestroyedClassesFiltering
  # source://with_model//lib/with_model/descendants_tracker.rb#70
  def descendants; end

  # source://with_model//lib/with_model/descendants_tracker.rb#66
  def subclasses; end
end

# On TruffleRuby `ObjectSpace::WeakMap` keys are strong references.
# So we use `object_id` as a key and the actual object as a value.
#
# JRuby for now doesn't have Class#descendant, but when it will, it will likely
# have the same WeakMap semantic than Truffle so we future proof this as much as possible.
#
# source://with_model//lib/with_model/descendants_tracker.rb#9
class WithModel::DescendantsTracker::WeakSet < ::ObjectSpace::WeakMap
  # source://with_model//lib/with_model/descendants_tracker.rb#12
  def <<(object); end

  # source://with_model//lib/with_model/descendants_tracker.rb#10
  def to_a; end
end

# Extended into all ActiveRecord models created by with_model.
#
# source://with_model//lib/with_model/methods.rb#5
module WithModel::Methods
  # Since model classes not created by with_model won't have this
  # method, one should instead test `respond_to?(:with_model?)`.
  #
  # @return [Boolean]
  #
  # source://with_model//lib/with_model/methods.rb#8
  def with_model?; end
end

# source://with_model//lib/with_model.rb#9
class WithModel::MiniTestLifeCycle < ::Module
  # @return [MiniTestLifeCycle] a new instance of MiniTestLifeCycle
  #
  # source://with_model//lib/with_model.rb#10
  def initialize(object); end

  class << self
    # source://with_model//lib/with_model.rb#22
    def call(object); end
  end
end

# In general, direct use of this class should be avoided. Instead use
# either the {WithModel high-level API} or {WithModel::Model::DSL low-level API}.
#
# source://with_model//lib/with_model/model.rb#15
class WithModel::Model
  # @param name [Symbol] The constant name to assign the model class to.
  # @param superclass [Class] The superclass for the created class. Should
  #   have `ActiveRecord::Base` as an ancestor.
  # @return [Model] a new instance of Model
  #
  # source://with_model//lib/with_model/model.rb#21
  def initialize(name, superclass: T.unsafe(nil)); end

  # source://with_model//lib/with_model/model.rb#29
  def create; end

  # source://with_model//lib/with_model/model.rb#38
  def destroy; end

  # Sets the attribute model_block
  #
  # @param value the value to set the attribute model_block to.
  #
  # source://with_model//lib/with_model/model.rb#16
  def model_block=(_arg0); end

  # Sets the attribute table_block
  #
  # @param value the value to set the attribute table_block to.
  #
  # source://with_model//lib/with_model/model.rb#16
  def table_block=(_arg0); end

  # Sets the attribute table_options
  #
  # @param value the value to set the attribute table_options to.
  #
  # source://with_model//lib/with_model/model.rb#16
  def table_options=(_arg0); end

  private

  # source://with_model//lib/with_model/model.rb#59
  def cleanup_descendants_tracking; end

  # source://with_model//lib/with_model/model.rb#49
  def const_name; end

  # source://with_model//lib/with_model/model.rb#64
  def reset_dependencies_cache; end

  # source://with_model//lib/with_model/model.rb#53
  def setup_model; end

  # source://with_model//lib/with_model/model.rb#70
  def stubber; end

  # source://with_model//lib/with_model/model.rb#74
  def table; end

  # source://with_model//lib/with_model/model.rb#78
  def table_name; end
end

# source://with_model//lib/with_model/model/dsl.rb#5
class WithModel::Model::DSL
  # @param model [WithModel::Model] The Model to mutate via this DSL.
  # @return [DSL] a new instance of DSL
  #
  # source://with_model//lib/with_model/model/dsl.rb#7
  def initialize(model); end

  # Provide a class body for the ActiveRecord model.
  #
  # source://with_model//lib/with_model/model/dsl.rb#21
  def model(&block); end

  # Provide a schema definition for the table, passed to ActiveRecord's `create_table`.
  # The table name will be auto-generated.
  #
  # @see https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table
  #
  # source://with_model//lib/with_model/model/dsl.rb#15
  def table(options = T.unsafe(nil), &block); end
end

# In general, direct use of this class should be avoided. Instead use
# either the {WithModel high-level API} or {WithModel::Model::DSL low-level API}.
#
# source://with_model//lib/with_model/table.rb#8
class WithModel::Table
  # @param name [Symbol] The name of the table to create.
  # @param options Passed to ActiveRecord `create_table`.
  # @param connection The connection to use for creating the table.
  # @param block Passed to ActiveRecord `create_table`.
  # @return [Table] a new instance of Table
  # @see https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table
  #
  # source://with_model//lib/with_model/table.rb#14
  def initialize(name, options = T.unsafe(nil), connection: T.unsafe(nil), &block); end

  # Creates the table with the initialized options. Drops the table if
  # it already exists.
  #
  # source://with_model//lib/with_model/table.rb#23
  def create; end

  # source://with_model//lib/with_model/table.rb#28
  def destroy; end

  private

  # Returns the value of attribute connection.
  #
  # source://with_model//lib/with_model/table.rb#34
  def connection; end

  # @return [Boolean]
  #
  # source://with_model//lib/with_model/table.rb#36
  def exists?; end
end

# source://with_model//lib/with_model/version.rb#4
WithModel::VERSION = T.let(T.unsafe(nil), String)
